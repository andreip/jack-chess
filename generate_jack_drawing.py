#!/usr/bin/env python

import os

PIECES_DIR = "sprites/"
OUTPUT_CLASS = 'DrawSprites'

def strTo16bitInt(number, big_endian=True):
    """
    >>> strTo16bitInt('0000000000000011', big_endian=False)
    -16384
    >>> strTo16bitInt('0000000000000001', big_endian=False)
    -32768
    >>> strTo16bitInt('1000000000000010', big_endian=False)
    16385
    >>> strTo16bitInt('0100000000000000')
    16384
    """
    assert len(number) == 16, "Number given is >16 characters: %s" % number

    if not big_endian:
        number = number[::-1]

    negative = True if number[0] == '1' else False
    num = int(number, 2)

    if negative:
        num = num - 2**16
    return num

bitmap_template = """
    %s void %s(int location) {
        var int memAddress;
        let memAddress = 16384 + location;
        do Memory.poke(memAddress+0, %d);
        do Memory.poke(memAddress+32, %d);
        do Memory.poke(memAddress+64, %d);
        do Memory.poke(memAddress+96, %d);
        do Memory.poke(memAddress+128, %d);
        do Memory.poke(memAddress+160, %d);
        do Memory.poke(memAddress+192, %d);
        do Memory.poke(memAddress+224, %d);
        do Memory.poke(memAddress+256, %d);
        do Memory.poke(memAddress+288, %d);
        do Memory.poke(memAddress+320, %d);
        do Memory.poke(memAddress+352, %d);
        do Memory.poke(memAddress+384, %d);
        do Memory.poke(memAddress+416, %d);
        do Memory.poke(memAddress+448, %d);
        do Memory.poke(memAddress+480, %d);
        return;
    }
"""

class_template = """/* Generated by generate_jack_drawing.py script. */

class %(name)s {
%(body)s
}
"""

def generateJackFromBitmap(path, funcName="draw", typeName="function"):
    numbers = []
    with open(path) as f:
        for line in f:
            line = line.rstrip()
            if line:
                numbers.append(strTo16bitInt(line, big_endian=False))
    return bitmap_template % tuple([typeName, funcName] + numbers)


def main():
    filepaths = (
        os.path.join(PIECES_DIR, name)
        for name in os.listdir(PIECES_DIR)
        if name.endswith(".raw")
    )

    def _gen(path):
        filename = os.path.split(path)[-1]
        # drops extension; eg. drawBishopWhite
        funcName = "draw" + filename.rsplit('.')[0]
        return generateJackFromBitmap(path, funcName)

    body = ''.join(map(_gen, filepaths))
    output = class_template % {'name': OUTPUT_CLASS, 'body': body}

    with open(OUTPUT_CLASS + '.jack', 'w') as f:
        f.write(output)


if __name__ == "__main__":
    main()
